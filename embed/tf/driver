#!/usr/bin/env python3

import os
import sys
sys.path.insert(0, os.path.join(
    os.path.dirname(__file__), '../../utils/python'))
import fmwork

import argparse
import os
import torch
import transformers

#   -------------
#   main function
#   -------------

def main():

    args  = setup_args()
    setup_runtime(args)
    model = setup_model(args)
    gen   = setup_gen(args)

    bench(args, model)

#   ---------------------------------------
#   read and process command line arguments
#   ---------------------------------------

def setup_args():

    fmwork.banner('ARGS')

    parser = argparse.ArgumentParser()
    parser.add = parser.add_argument
    parser.add('--platform',    type=str, required=True)
    parser.add('--model_class', type=str, required=True)
    parser.add('--model_root',  type=str)
    parser.add('--model_name',  type=str, required=True)
    parser.add('--compile',     action='store_true')
    parser.add('--eval',        action='store_true')
    parser.add('--input_sizes', type=str, required=True)
    parser.add('--batch_sizes', type=str, required=True)
    parser.add('--reps',        type=int, required=True)
    args, opts = parser.parse_known_args()
    fmwork.args.process_opts(args, opts, [
        'compile', 'model', 'torch.call', 'torch.set',
    ], globals())

    fmwork.args.show(args)

    return args

#   ----------------------------------------------------------
#   set up platform and engine specific options and components
#   ----------------------------------------------------------

def setup_runtime(args):

    fmwork.banner('RUNTIME')

    print('setup_runtime: torch')

    print('\t', 'torch.call')
    for key in args.subs['torch.call']:
        val = args.subs['torch.call'][key]
        print('\t\t', key, val)
        s = f'torch.{key}({val})'
        eval(s)

    print('\t', 'torch.set')
    for key in args.subs['torch.set']:
        val = args.subs['torch.set'][key]
        print('\t\t', key, val)
        s = f'torch.{key} = {val}'
        exec(s)

    if args.platform == 'spyre': return setup_runtime_spyre(args)

def setup_runtime_spyre(args):

    print('setup_runtime: spyre')

    print('\t', 'torch_sendnn')
    from torch_sendnn import torch_sendnn

#   -----------------------------------------------
#   load model and call other model setup functions
#   -----------------------------------------------

def setup_model(args):

    fmwork.banner('MODEL')

    model_path = (
        os.path.join(args.model_root, args.model_name)
        if args.model_root
        else args.model_name
    )

    model = getattr(
        transformers,
        args.model_class,
    ).from_pretrained(
        model_path,
        **args.subs['model'],
    )

    if args.platform != 'spyre':
        model = model.to(args.platform)

    if args.compile: model = torch.compile(model, **args.subs['compile'])
    if args.eval:    model.eval()

    print(model)

#   -------------------------------
#   set up input (prompt) generator
#   -------------------------------

#   --------------------------
#   benchmark logic entrypoint
#   --------------------------

def bench(args, model):

    input_sizes = list(map(int, args.input_sizes.split(',')))
    batch_sizes = list(map(int, args.batch_sizes.split(',')))

    for batch_size in batch_sizes:
        for input_size in input_sizes:
            bench_one(args, model, input_size, batch_size)

def bench_one(args, model, input_size, batch_size):

    fmwork.banner('RUN', input_size, batch_size)

    for rep in range(args.reps):
        dt = bench_one_rep(args, model, input_size, batch_size, rep)

def bench_one_rep(args, model, input_size, batch_size, rep):

    t0 = fmwork.time.get()
    t1 = fmwork.time.get()
    dt = fmwork.time.diff(t1, t0)

    print(
        'FMWORK REP',
        rep + 1, args.reps,
        fmwork.time.format(t0), fmwork.time.format(t1),
        '%.9f' % (dt))

    return dt

#   ------------------
#   program entrypoint
#   ------------------

if __name__ == '__main__':
    main(); print()

